#!/usr/bin/env ruby
# frozen_string_literal: true

require 'debug'

require 'yaml'
require 'httparty'
require 'thor'
require 'chess'
require 'stockfish'

DEPTH = 18
API = 'http://localhost:3000/api'

class ChessHabitsAPI
  def self.analysis
    response = HTTParty.get(
      "#{API}/analysis",
      headers: { 'Content-Type' => 'application/json' }
    )
    JSON.parse(response.body)
  end

  def self.post_puzzle(username, puzzle)
    HTTParty.post("#{API}/puzzles", {
      headers: { 'Content-Type' => 'application/json' },
      body: {
        username:,
        puzzle: {
          'fen' => puzzle['fen'],
          'move' => puzzle['move']
        }
      }.to_json
    })
    throw :api_error unless response.ok?
  end

  def self.post_analysis(position_id, analysis)
    response = HTTParty.put("#{API}/positions/#{position_id}", {
      headers: { 'Content-Type' => 'application/json' },
        body: analysis.to_json
    })
    throw :api_error unless response.ok?
    JSON.parse(response.body)
  end

  def self.fetch_game(lichess_id)
    response = HTTParty.get(
      "https://lichess.org/game/export/#{lichess_id[0..7]}",
      headers: { 
        'Content-Type' => 'application/json',
        'Accept' => 'application/json'
      }
    )
    throw :lichess_error unless response.ok?
    JSON.parse(response.body)
  end

  def self.fetch_games(username, options={})
    response = HTTParty.get(
      "https://lichess.org/api/games/user/#{username}?max=100"
    )
    response.body
  end

  def self.get_player_id(username)
    response = HTTParty.get("#{API}/users/#{username}")

    throw :api_error unless response.ok?
    JSON.parse(response.body)["id"]
  end

  def self.create_position(fen)
    response = HTTParty.post("#{API}/positions", {
      headers: { 'Content-Type' => 'application/json' },
      body: {
        fen:
      }.to_json
    })
    throw :api_error unless response.ok?
    JSON.parse(response.body)
  end

  def self.create_move(player_id, position_id, move)
    response = HTTParty.post("#{API}/moves", {
      headers: { 'Content-Type' => 'application/json' },
      body: {
        user_id: player_id,
        position_id:,
        move:
      }.to_json
    })
    throw :api_error unless response.ok?
    JSON.parse(response.body)
  end
end

class ChessHabitsCLI < Thor
  desc 'puzzles FILE', 'create puzzles from FILE'
  option :username, required: true
  def puzzles(puzzles_file)
    puzzles = YAML.load_file(puzzles_file)

    puzzles['puzzles'].each do |puzzle|
      ChessHabitsAPI.post_puzzle(options[:username], puzzle)
    end
  end

  desc 'import FILE', 'import game from Lichess.org, one ID per line in FILE'
  option :username, required: true
  def import(file)
    game_ids = File.readlines(file)

    game_ids.each do |lichess_id|
      game = ChessHabitsAPI.fetch_game(lichess_id.strip)

      player_id = ChessHabitsAPI.get_player_id(options[:username])

      if game["players"]["white"]["user"]["name"] == options[:username]
        player_index = 0
      end

      if game["players"]["black"]["user"]["name"] == options[:username]
        player_index = 1
      end

      throw :player_not_found unless player_index

      cgame = Chess::Game.new

      game["moves"].split(' ').each_with_index do |move, index|
        fen = cgame.board.to_fen
        cgame.move(move)
        uci = cgame.coord_moves.last

        if index % 2 == player_index
          position = ChessHabitsAPI.create_position(fen)
          catch :api_error do
            ChessHabitsAPI.create_move(player_id, position["id"], uci)
          end
        end
      end
    end

  end

  desc 'analyze', 'analyze a fen from the API'
  option :depth, default: DEPTH, type: :numeric
  option :size, default: 1, type: :numeric
  def analyze
    options[:size].times do
      position = ChessHabitsAPI.analysis

      unless position
        p 'Nothing to analyze'
        exit
      end

      stockfish_analysis = Stockfish.analyze(position['fen'], depth: options[:depth], multipv: 2)
      scores = stockfish_analysis[:variations].map {|var| var[:score]}
      scores.map! {|s| s.class == String ? 150 : s}

      if scores.size == 2
        criticality = (scores[0] - scores[1]).abs
      else
        criticality = 0
      end

      analysis = {
        depth: options[:depth],
        score: scores.max,
        best_move: stockfish_analysis[:bestmove],
        criticality: criticality
      }

      p ChessHabitsAPI.post_analysis(position['id'], analysis)
    end
  end

  desc 'games USERNAME', 'download games for lichess USERNAME'
  option :size, default: 50, type: :numeric
  def games(username)
    games = ChessHabitsAPI.fetch_games(username, options)

    games.scan(/https:\/\/lichess.org\/(\w+)/).each do |match|
      puts match[0]
    end
  end
end

ChessHabitsCLI.start(ARGV)
