#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'httparty'
require 'thor'
require 'pgn'
require 'stockfish'

require 'debug'

DEPTH = 12
API = 'http://localhost:3000/api'

class ChessHabitsAPI
  def self.analysis
    response = HTTParty.get(
      "#{API}/analysis",
      headers: { 'Content-Type' => 'application/json' }
    )
    JSON.parse(response.body)
  end

  def self.post_puzzle(username, puzzle)
    HTTParty.post("#{API}/puzzles", {
                    headers: { 'Content-Type' => 'application/json' },
                    body: {
                      username:,
                      puzzle: {
                        'fen' => puzzle['fen'],
                        'move' => puzzle['move']
                      }
                    }.to_json
                  })
  end

  def self.post_analysis(analysis)
    HTTParty.post("#{API}/analyses", {
                    headers: { 'Content-Type' => 'application/json' },
                    body: analysis.to_json
                  })
  end

  def self.fetch_game(lichess_id)
    response = HTTParty.get("https://lichess.org/game/export/#{lichess_id[0..7]}")
    game = PGN.parse(response.body).first
  end
end

class ChessHabitsCLI < Thor
  desc 'puzzles FILE', 'create puzzles from FILE'
  option :username, required: true
  def puzzles(puzzles_file)
    puzzles = YAML.load_file(puzzles_file)

    puzzles['puzzles'].each do |puzzle|
      ChessHabitsAPI.post_puzzle(options[:username], puzzle)
    end
  end

  desc 'analyze', 'analyze a fen from the API'
  option :depth, default: DEPTH, type: :numeric
  def analyze
    position = ChessHabitsAPI.analysis

    unless position
      p 'Nothing to analyze'
      exit
    end

    stockfish_analysis = Stockfish.analyze(position['fen'], depth: options[:depth], multipv: 2)
    scores = stockfish_analysis[:variations].map {|var| var[:score]}
    scores.map! {|s| s.class == String ? 150 : s}

    criticality = (scores[0] - scores[1]).abs

    analysis = {
      depth: options[:depth],
      score: scores.max,
      best_move: stockfish_analysis[:bestmove],
      position_id: position['id'],
      criticality: criticality
    }

    p ChessHabitsAPI.post_analysis(analysis)
  end
end

ChessHabitsCLI.start(ARGV)
